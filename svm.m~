%{
Support vector machine
%}

clc

% ######### Set aside some of the data for testing ##########

% We want to shuffle both inputs and outputs while preserving the
% correlation
p = randperm(length(final_inputs_svm));
random_final_inputs = final_inputs_svm(p, :);
q = randperm(length(final_inputs_svm));
random_final_targets = final_targets_svm(q, :);

% set some percentage of it aside for testing
test_percent = 15;
test_element_count = uint32((test_percent/100)*length(random_final_inputs));

% Define which features to include in the input set.
train_inputs = random_final_inputs(1:end-test_element_count,:);    % Take all the rows, and all the 10 features as inputs. Could also use: inputs = dataSet(:,1:end-2).
test_inputs= random_final_inputs(end-test_element_count+1:end,:);

% Define the target set
train_targets = random_final_targets(1:end-test_element_count, :); 
test_targets = random_final_targets(end-test_element_count+1:end,:);


% ######### Model Training ##################################

%Create a SVM Model template to fit into fitcecoc()
t = templateSVM('Standardize',true);

SVMModel_Multi = fitcecoc(train_inputs,train_targets,'Learners',t);

SVMModel_Multi.ClassNames

CodingMat = SVMModel_Multi.CodingMatrix;



% ######### Model Evaluation ##################################
targets_from_test_prediction = predict(SVMModel_Multi,test_inputs,'Verbose',1);

SVMModel_Multi.BinaryLoss

%Plot Confusion Matrix
confusionchart(test_targets,targets_from_test_prediction);
